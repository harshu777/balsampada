name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: ${{ secrets.DOCKER_USERNAME }}/balsampada-backend
  IMAGE_NAME_FRONTEND: ${{ secrets.DOCKER_USERNAME }}/balsampada-frontend

jobs:
  # ==========================================
  # Testing Job
  # ==========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: test_access_secret_key
          JWT_REFRESH_SECRET: test_refresh_secret_key
          JWT_SECRET: test_secret_key
        run: |
          # Run tests if test script exists
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No test script found, skipping backend tests"
          fi

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          # Run tests if test script exists
          if npm run | grep -q "test"; then
            npm test -- --passWithNoTests
          else
            echo "No test script found, skipping frontend tests"
          fi

      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000/api
        run: npm run build

  # ==========================================
  # Build and Push Docker Images
  # ==========================================
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAME_BACKEND }}
            ${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
            ${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_BACKEND }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
            ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_FRONTEND }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}

  # ==========================================
  # Deploy to Staging
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.balsampada.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd /var/www/balsampada
            
            # Pull latest images
            docker pull ${{ env.IMAGE_NAME_BACKEND }}:develop
            docker pull ${{ env.IMAGE_NAME_FRONTEND }}:develop
            
            # Update docker-compose with new images
            export BACKEND_IMAGE=${{ env.IMAGE_NAME_BACKEND }}:develop
            export FRONTEND_IMAGE=${{ env.IMAGE_NAME_FRONTEND }}:develop
            
            # Restart services
            docker-compose down
            docker-compose up -d
            
            # Health check
            sleep 10
            curl -f http://localhost:5000/api/health || exit 1

  # ==========================================
  # Deploy to Production
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://balsampada.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /var/www/balsampada
            
            # Backup current deployment
            docker-compose exec -T mongodb mongodump --out /backup/$(date +%Y%m%d_%H%M%S)
            
            # Pull latest images
            docker pull ${{ env.IMAGE_NAME_BACKEND }}:latest
            docker pull ${{ env.IMAGE_NAME_FRONTEND }}:latest
            
            # Update docker-compose with new images
            export BACKEND_IMAGE=${{ env.IMAGE_NAME_BACKEND }}:latest
            export FRONTEND_IMAGE=${{ env.IMAGE_NAME_FRONTEND }}:latest
            
            # Rolling update
            docker-compose up -d --no-deps --scale backend=2 backend
            sleep 30
            docker-compose up -d --no-deps frontend
            
            # Remove old containers
            docker system prune -f
            
            # Health check
            sleep 10
            curl -f https://api.balsampada.com/health || exit 1

      - name: Notify Deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production Deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==========================================
  # Security Scanning
  # ==========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high