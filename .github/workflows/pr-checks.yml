name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # ==========================================
  # Code Quality Checks
  # ==========================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Lint Backend
        working-directory: ./backend
        run: |
          npm ci
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "No lint script found for backend"
          fi

      - name: Lint Frontend
        working-directory: ./frontend
        run: |
          npm ci
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "No lint script found for frontend"
          fi

  # ==========================================
  # Type Checking
  # ==========================================
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Type Check Frontend
        working-directory: ./frontend
        run: |
          npm ci
          if npm run | grep -q "type-check"; then
            npm run type-check
          elif npm run | grep -q "typecheck"; then
            npm run typecheck
          else
            npx tsc --noEmit || echo "TypeScript check completed"
          fi

  # ==========================================
  # Build Test
  # ==========================================
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: balsampada-backend:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: balsampada-frontend:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # Size Check
  # ==========================================
  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Check Frontend Bundle Size
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: ./frontend
          skip_step: install
        continue-on-error: true

  # ==========================================
  # Comment PR
  # ==========================================
  pr-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build-test]
    if: always()
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('## 🤖 PR Status')
            });
            
            const body = `## 🤖 PR Status
            
            | Check | Status |
            |-------|--------|
            | Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |
            | TypeCheck | ${{ needs.typecheck.result == 'success' && '✅' || '❌' }} |
            | Build | ${{ needs.build-test.result == 'success' && '✅' || '❌' }} |
            
            **Commit:** ${{ github.event.pull_request.head.sha }}
            **Updated:** ${new Date().toUTCString()}
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }